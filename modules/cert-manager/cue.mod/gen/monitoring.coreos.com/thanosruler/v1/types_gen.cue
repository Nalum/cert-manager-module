// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.68.0/stripped-down-crds.yaml

package v1

import "strings"

#ThanosRuler: {
	apiVersion: "monitoring.coreos.com/v1"
	kind:       "ThanosRuler"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #ThanosRulerSpec
}
#ThanosRulerSpec: {
	additionalArgs?: [...{
		name:   strings.MinRunes(1)
		value?: string
	}]
	affinity?: {
		nodeAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				preference: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchFields?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
				}
				weight: int
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: {
				nodeSelectorTerms: [...{
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchFields?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
				}]
			}
		}
		podAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				podAffinityTerm: {
					labelSelector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					namespaceSelector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					namespaces?: [...string]
					topologyKey: string
				}
				weight: int
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: [...{
				labelSelector?: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				namespaceSelector?: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				namespaces?: [...string]
				topologyKey: string
			}]
		}
		podAntiAffinity?: {
			preferredDuringSchedulingIgnoredDuringExecution?: [...{
				podAffinityTerm: {
					labelSelector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					namespaceSelector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					namespaces?: [...string]
					topologyKey: string
				}
				weight: int
			}]
			requiredDuringSchedulingIgnoredDuringExecution?: [...{
				labelSelector?: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				namespaceSelector?: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				namespaces?: [...string]
				topologyKey: string
			}]
		}
	}
	alertDropLabels?: [...string]
	alertQueryUrl?:          string
	alertRelabelConfigFile?: string
	alertRelabelConfigs?: {
		key:       string
		name?:     string
		optional?: bool
	}
	alertmanagersConfig?: {
		key:       string
		name?:     string
		optional?: bool
	}
	alertmanagersUrl?: [...string]
	containers?: [...{
		args?: [...string]
		command?: [...string]
		env?: [...{
			name:   string
			value?: string
			valueFrom?: {
				configMapKeyRef?: {
					key:       string
					name?:     string
					optional?: bool
				}
				fieldRef?: {
					apiVersion?: string
					fieldPath:   string
				}
				resourceFieldRef?: {
					containerName?: string
					divisor?: (int | string) & {
						=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
					}
					resource: string
				}
				secretKeyRef?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
		}]
		envFrom?: [...{
			configMapRef?: {
				name?:     string
				optional?: bool
			}
			prefix?: string
			secretRef?: {
				name?:     string
				optional?: bool
			}
		}]
		image?:           string
		imagePullPolicy?: string
		lifecycle?: {
			postStart?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name:  string
						value: string
					}]
					path?: string
					port: (int | string) & {
						string
					}
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port: (int | string) & {
						string
					}
				}
			}
			preStop?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name:  string
						value: string
					}]
					path?: string
					port: (int | string) & {
						string
					}
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port: (int | string) & {
						string
					}
				}
			}
		}
		livenessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		name: string
		ports?: [...{
			containerPort: int
			hostIP?:       string
			hostPort?:     int
			name?:         string
			protocol?:     string | *"TCP"
		}]
		readinessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		resizePolicy?: [...{
			resourceName:  string
			restartPolicy: string
		}]
		resources?: {
			claims?: [...{
				name: string
			}]
			limits?: {
				[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
			requests?: {
				[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
		}
		restartPolicy?: string
		securityContext?: {
			allowPrivilegeEscalation?: bool
			capabilities?: {
				add?: [...string]
				drop?: [...string]
			}
			privileged?:             bool
			procMount?:              string
			readOnlyRootFilesystem?: bool
			runAsGroup?:             int
			runAsNonRoot?:           bool
			runAsUser?:              int
			seLinuxOptions?: {
				level?: string
				role?:  string
				type?:  string
				user?:  string
			}
			seccompProfile?: {
				localhostProfile?: string
				type:              string
			}
			windowsOptions?: {
				gmsaCredentialSpec?:     string
				gmsaCredentialSpecName?: string
				hostProcess?:            bool
				runAsUserName?:          string
			}
		}
		startupProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		stdin?:                    bool
		stdinOnce?:                bool
		terminationMessagePath?:   string
		terminationMessagePolicy?: string
		tty?:                      bool
		volumeDevices?: [...{
			devicePath: string
			name:       string
		}]
		volumeMounts?: [...{
			mountPath:         string
			mountPropagation?: string
			name:              string
			readOnly?:         bool
			subPath?:          string
			subPathExpr?:      string
		}]
		workingDir?: string
	}]
	enforcedNamespaceLabel?: string
	evaluationInterval?:     =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$" | *"15s"
	excludedFromEnforcement?: [...{
		group?:    "monitoring.coreos.com" | *"monitoring.coreos.com"
		name?:     string
		namespace: strings.MinRunes(1)
		resource:  "prometheusrules" | "servicemonitors" | "podmonitors" | "probes" | "scrapeconfigs"
	}]
	externalPrefix?: string
	grpcServerTlsConfig?: {
		ca?: {
			configMap?: {
				key:       string
				name?:     string
				optional?: bool
			}
			secret?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		caFile?: string
		cert?: {
			configMap?: {
				key:       string
				name?:     string
				optional?: bool
			}
			secret?: {
				key:       string
				name?:     string
				optional?: bool
			}
		}
		certFile?:           string
		insecureSkipVerify?: bool
		keyFile?:            string
		keySecret?: {
			key:       string
			name?:     string
			optional?: bool
		}
		serverName?: string
	}
	hostAliases?: [...{
		hostnames: [...string]
		ip: string
	}]
	image?:           string
	imagePullPolicy?: "" | "Always" | "Never" | "IfNotPresent"
	imagePullSecrets?: [...{
		name?: string
	}]
	initContainers?: [...{
		args?: [...string]
		command?: [...string]
		env?: [...{
			name:   string
			value?: string
			valueFrom?: {
				configMapKeyRef?: {
					key:       string
					name?:     string
					optional?: bool
				}
				fieldRef?: {
					apiVersion?: string
					fieldPath:   string
				}
				resourceFieldRef?: {
					containerName?: string
					divisor?: (int | string) & {
						=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
					}
					resource: string
				}
				secretKeyRef?: {
					key:       string
					name?:     string
					optional?: bool
				}
			}
		}]
		envFrom?: [...{
			configMapRef?: {
				name?:     string
				optional?: bool
			}
			prefix?: string
			secretRef?: {
				name?:     string
				optional?: bool
			}
		}]
		image?:           string
		imagePullPolicy?: string
		lifecycle?: {
			postStart?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name:  string
						value: string
					}]
					path?: string
					port: (int | string) & {
						string
					}
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port: (int | string) & {
						string
					}
				}
			}
			preStop?: {
				exec?: {
					command?: [...string]
				}
				httpGet?: {
					host?: string
					httpHeaders?: [...{
						name:  string
						value: string
					}]
					path?: string
					port: (int | string) & {
						string
					}
					scheme?: string
				}
				tcpSocket?: {
					host?: string
					port: (int | string) & {
						string
					}
				}
			}
		}
		livenessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		name: string
		ports?: [...{
			containerPort: int
			hostIP?:       string
			hostPort?:     int
			name?:         string
			protocol?:     string | *"TCP"
		}]
		readinessProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		resizePolicy?: [...{
			resourceName:  string
			restartPolicy: string
		}]
		resources?: {
			claims?: [...{
				name: string
			}]
			limits?: {
				[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
			requests?: {
				[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
		}
		restartPolicy?: string
		securityContext?: {
			allowPrivilegeEscalation?: bool
			capabilities?: {
				add?: [...string]
				drop?: [...string]
			}
			privileged?:             bool
			procMount?:              string
			readOnlyRootFilesystem?: bool
			runAsGroup?:             int
			runAsNonRoot?:           bool
			runAsUser?:              int
			seLinuxOptions?: {
				level?: string
				role?:  string
				type?:  string
				user?:  string
			}
			seccompProfile?: {
				localhostProfile?: string
				type:              string
			}
			windowsOptions?: {
				gmsaCredentialSpec?:     string
				gmsaCredentialSpecName?: string
				hostProcess?:            bool
				runAsUserName?:          string
			}
		}
		startupProbe?: {
			exec?: {
				command?: [...string]
			}
			failureThreshold?: int
			grpc?: {
				port:     int
				service?: string
			}
			httpGet?: {
				host?: string
				httpHeaders?: [...{
					name:  string
					value: string
				}]
				path?: string
				port: (int | string) & {
					string
				}
				scheme?: string
			}
			initialDelaySeconds?: int
			periodSeconds?:       int
			successThreshold?:    int
			tcpSocket?: {
				host?: string
				port: (int | string) & {
					string
				}
			}
			terminationGracePeriodSeconds?: int
			timeoutSeconds?:                int
		}
		stdin?:                    bool
		stdinOnce?:                bool
		terminationMessagePath?:   string
		terminationMessagePolicy?: string
		tty?:                      bool
		volumeDevices?: [...{
			devicePath: string
			name:       string
		}]
		volumeMounts?: [...{
			mountPath:         string
			mountPropagation?: string
			name:              string
			readOnly?:         bool
			subPath?:          string
			subPathExpr?:      string
		}]
		workingDir?: string
	}]
	labels?: {
		[string]: string
	}
	listenLocal?:     bool
	logFormat?:       "" | "logfmt" | "json"
	logLevel?:        "" | "debug" | "info" | "warn" | "error"
	minReadySeconds?: int
	nodeSelector?: {
		[string]: string
	}
	objectStorageConfig?: {
		key:       string
		name?:     string
		optional?: bool
	}
	objectStorageConfigFile?: string
	paused?:                  bool
	podMetadata?: {
		annotations?: {
			[string]: string
		}
		labels?: {
			[string]: string
		}
		name?: string
	}
	portName?:          string | *"web"
	priorityClassName?: string
	prometheusRulesExcludedFromEnforce?: [...{
		ruleName:      string
		ruleNamespace: string
	}]
	queryConfig?: {
		key:       string
		name?:     string
		optional?: bool
	}
	queryEndpoints?: [...string]
	replicas?: int
	resources?: {
		claims?: [...{
			name: string
		}]
		limits?: {
			[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
		}
		requests?: {
			[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
		}
	}
	retention?:   =~"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$" | *"24h"
	routePrefix?: string
	ruleNamespaceSelector?: {
		matchExpressions?: [...{
			key:      string
			operator: string
			values?: [...string]
		}]
		matchLabels?: {
			[string]: string
		}
	}
	ruleSelector?: {
		matchExpressions?: [...{
			key:      string
			operator: string
			values?: [...string]
		}]
		matchLabels?: {
			[string]: string
		}
	}
	securityContext?: {
		fsGroup?:             int
		fsGroupChangePolicy?: string
		runAsGroup?:          int
		runAsNonRoot?:        bool
		runAsUser?:           int
		seLinuxOptions?: {
			level?: string
			role?:  string
			type?:  string
			user?:  string
		}
		seccompProfile?: {
			localhostProfile?: string
			type:              string
		}
		supplementalGroups?: [...int]
		sysctls?: [...{
			name:  string
			value: string
		}]
		windowsOptions?: {
			gmsaCredentialSpec?:     string
			gmsaCredentialSpecName?: string
			hostProcess?:            bool
			runAsUserName?:          string
		}
	}
	serviceAccountName?: string
	storage?: {
		disableMountSubPath?: bool
		emptyDir?: {
			medium?: string
			sizeLimit?: (int | string) & {
				=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
		}
		ephemeral?: {
			volumeClaimTemplate?: {
				metadata?: {}
				spec: {
					accessModes?: [...string]
					dataSource?: {
						apiGroup?: string
						kind:      string
						name:      string
					}
					dataSourceRef?: {
						apiGroup?:  string
						kind:       string
						name:       string
						namespace?: string
					}
					resources?: {
						claims?: [...{
							name: string
						}]
						limits?: {
							[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
						}
						requests?: {
							[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
						}
					}
					selector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					storageClassName?: string
					volumeMode?:       string
					volumeName?:       string
				}
			}
		}
		volumeClaimTemplate?: {
			apiVersion?: string
			kind?:       string
			metadata?: {
				annotations?: {
					[string]: string
				}
				labels?: {
					[string]: string
				}
				name?: string
			}
			spec?: {
				accessModes?: [...string]
				dataSource?: {
					apiGroup?: string
					kind:      string
					name:      string
				}
				dataSourceRef?: {
					apiGroup?:  string
					kind:       string
					name:       string
					namespace?: string
				}
				resources?: {
					claims?: [...{
						name: string
					}]
					limits?: {
						[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
					}
					requests?: {
						[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
					}
				}
				selector?: {
					matchExpressions?: [...{
						key:      string
						operator: string
						values?: [...string]
					}]
					matchLabels?: {
						[string]: string
					}
				}
				storageClassName?: string
				volumeMode?:       string
				volumeName?:       string
			}
			status?: {
				accessModes?: [...string]
				allocatedResourceStatuses?: {
					[string]: string
				}
				allocatedResources?: {
					[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
				}
				capacity?: {
					[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
				}
				conditions?: [...{
					lastProbeTime?:      string
					lastTransitionTime?: string
					message?:            string
					reason?:             string
					status:              string
					type:                string
				}]
				phase?: string
			}
		}
	}
	tolerations?: [...{
		effect?:            string
		key?:               string
		operator?:          string
		tolerationSeconds?: int
		value?:             string
	}]
	topologySpreadConstraints?: [...{
		labelSelector?: {
			matchExpressions?: [...{
				key:      string
				operator: string
				values?: [...string]
			}]
			matchLabels?: {
				[string]: string
			}
		}
		matchLabelKeys?: [...string]
		maxSkew:             int
		minDomains?:         int
		nodeAffinityPolicy?: string
		nodeTaintsPolicy?:   string
		topologyKey:         string
		whenUnsatisfiable:   string
	}]
	tracingConfig?: {
		key:       string
		name?:     string
		optional?: bool
	}
	tracingConfigFile?: string
	version?:           string
	volumeMounts?: [...{
		mountPath:         string
		mountPropagation?: string
		name:              string
		readOnly?:         bool
		subPath?:          string
		subPathExpr?:      string
	}]
	volumes?: [...{
		awsElasticBlockStore?: {
			fsType?:    string
			partition?: int
			readOnly?:  bool
			volumeID:   string
		}
		azureDisk?: {
			cachingMode?: string
			diskName:     string
			diskURI:      string
			fsType?:      string
			kind?:        string
			readOnly?:    bool
		}
		azureFile?: {
			readOnly?:  bool
			secretName: string
			shareName:  string
		}
		cephfs?: {
			monitors: [...string]
			path?:       string
			readOnly?:   bool
			secretFile?: string
			secretRef?: {
				name?: string
			}
			user?: string
		}
		cinder?: {
			fsType?:   string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			volumeID: string
		}
		configMap?: {
			defaultMode?: int
			items?: [...{
				key:   string
				mode?: int
				path:  string
			}]
			name?:     string
			optional?: bool
		}
		csi?: {
			driver:  string
			fsType?: string
			nodePublishSecretRef?: {
				name?: string
			}
			readOnly?: bool
			volumeAttributes?: {
				[string]: string
			}
		}
		downwardAPI?: {
			defaultMode?: int
			items?: [...{
				fieldRef?: {
					apiVersion?: string
					fieldPath:   string
				}
				mode?: int
				path:  string
				resourceFieldRef?: {
					containerName?: string
					divisor?: (int | string) & {
						=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
					}
					resource: string
				}
			}]
		}
		emptyDir?: {
			medium?: string
			sizeLimit?: (int | string) & {
				=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
			}
		}
		ephemeral?: {
			volumeClaimTemplate?: {
				metadata?: {}
				spec: {
					accessModes?: [...string]
					dataSource?: {
						apiGroup?: string
						kind:      string
						name:      string
					}
					dataSourceRef?: {
						apiGroup?:  string
						kind:       string
						name:       string
						namespace?: string
					}
					resources?: {
						claims?: [...{
							name: string
						}]
						limits?: {
							[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
						}
						requests?: {
							[string]: (int | string) & =~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
						}
					}
					selector?: {
						matchExpressions?: [...{
							key:      string
							operator: string
							values?: [...string]
						}]
						matchLabels?: {
							[string]: string
						}
					}
					storageClassName?: string
					volumeMode?:       string
					volumeName?:       string
				}
			}
		}
		fc?: {
			fsType?:   string
			lun?:      int
			readOnly?: bool
			targetWWNs?: [...string]
			wwids?: [...string]
		}
		flexVolume?: {
			driver:  string
			fsType?: string
			options?: {
				[string]: string
			}
			readOnly?: bool
			secretRef?: {
				name?: string
			}
		}
		flocker?: {
			datasetName?: string
			datasetUUID?: string
		}
		gcePersistentDisk?: {
			fsType?:    string
			partition?: int
			pdName:     string
			readOnly?:  bool
		}
		gitRepo?: {
			directory?: string
			repository: string
			revision?:  string
		}
		glusterfs?: {
			endpoints: string
			path:      string
			readOnly?: bool
		}
		hostPath?: {
			path:  string
			type?: string
		}
		iscsi?: {
			chapAuthDiscovery?: bool
			chapAuthSession?:   bool
			fsType?:            string
			initiatorName?:     string
			iqn:                string
			iscsiInterface?:    string
			lun:                int
			portals?: [...string]
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			targetPortal: string
		}
		name: string
		nfs?: {
			path:      string
			readOnly?: bool
			server:    string
		}
		persistentVolumeClaim?: {
			claimName: string
			readOnly?: bool
		}
		photonPersistentDisk?: {
			fsType?: string
			pdID:    string
		}
		portworxVolume?: {
			fsType?:   string
			readOnly?: bool
			volumeID:  string
		}
		projected?: {
			defaultMode?: int
			sources?: [...{
				configMap?: {
					items?: [...{
						key:   string
						mode?: int
						path:  string
					}]
					name?:     string
					optional?: bool
				}
				downwardAPI?: {
					items?: [...{
						fieldRef?: {
							apiVersion?: string
							fieldPath:   string
						}
						mode?: int
						path:  string
						resourceFieldRef?: {
							containerName?: string
							divisor?: (int | string) & {
								=~"^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
							}
							resource: string
						}
					}]
				}
				secret?: {
					items?: [...{
						key:   string
						mode?: int
						path:  string
					}]
					name?:     string
					optional?: bool
				}
				serviceAccountToken?: {
					audience?:          string
					expirationSeconds?: int
					path:               string
				}
			}]
		}
		quobyte?: {
			group?:    string
			readOnly?: bool
			registry:  string
			tenant?:   string
			user?:     string
			volume:    string
		}
		rbd?: {
			fsType?:  string
			image:    string
			keyring?: string
			monitors: [...string]
			pool?:     string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			user?: string
		}
		scaleIO?: {
			fsType?:           string
			gateway:           string
			protectionDomain?: string
			readOnly?:         bool
			secretRef: {
				name?: string
			}
			sslEnabled?:  bool
			storageMode?: string
			storagePool?: string
			system:       string
			volumeName?:  string
		}
		secret?: {
			defaultMode?: int
			items?: [...{
				key:   string
				mode?: int
				path:  string
			}]
			optional?:   bool
			secretName?: string
		}
		storageos?: {
			fsType?:   string
			readOnly?: bool
			secretRef?: {
				name?: string
			}
			volumeName?:      string
			volumeNamespace?: string
		}
		vsphereVolume?: {
			fsType?:            string
			storagePolicyID?:   string
			storagePolicyName?: string
			volumePath:         string
		}
	}]
}
